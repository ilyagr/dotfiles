[alias]
    s = status --short --branch
    d = diff --stat
    cln = clean -ix :/
    adda = add :/
  restorea = restore :/
    lst = ls-files --with-tree

    pushf = push --force-with-lease --force-if-includes

    # For other rebases, made fish abbreviations
    autosquash = rebase --root --autostash --autosquash

    amend = commit --amend --no-edit
    # amenda = amend --all
  commita = !git adda && git commit
  amenda = !git adda && git amend

    meld = difftool -t meld -d
    tig = !tig

	# also git fscik --dangling --unreachable --lost-found
	fsckdanglingunreachablecommits = "!git fsck --dangling --unreachable | grep commit | tee /dev/stderr |  cut '-d ' -f3 | xargs -n 1 git log -n 1"

    # Note that the committer date this shows is sometimes different
    # from the magical "ref" date git reflog --relative-date shows.
    rl = reflog --pretty=reflog-with-committer-date --decorate=short
    # For some reason, `--decorate=no` shows *more* refs (esp. git-branchless refs).
    # This becomes messy, since outputting to `watch` or `cat` defaults to `--decorate=no`.

    lg = log --graph --pretty=lg --abbrev-commit --date=relative --decorate=short
 	lga = lg --branches --tags --remotes
    lgaa = lg --all
    # With author:
    # lg = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative

  watch = "!watch -t --color 'git -c color.ui=always status --short | head -n 3; echo; git lga --color -n $LINES'"
  # ==== Pipefail does not work since status always succeeds
  # watch = "!watch -t --color -x bash -c 'set -o pipefail; git -c color.ui=always status --short | head -n 3 && echo; git lg --color --all -n 30'"
  # ===== Cut off long file with mark.  ====
  # awk 'BEGIN {cutoff = 4} NR < cutoff { print $0 } NR == cutoff {print $0 " ...\n"}'
  # Maybe also END && NR > 0 {print "\n"}

[pretty]
reflog-with-committer-date=%C(auto)%h %<|(20)%gd %C(blue)%cr%C(reset) %gs (%s)
lg=%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %Creset

[pull]
# rebase = true
ff = only

[credential]
	helper = store
[init]
	defaultBranch = main
[notes]
    # More setup ideas: https://stackoverflow.com/a/40496777/563359
	rewriteRef = refs/notes/commits

[difftool "ediff"]
              cmd = emacs --eval \"(ediff-files \\\"$LOCAL\\\" \\\"$REMOTE\\\")\"
[difftool "ediffdir"]
              cmd = emacs -nw --eval \"(ediff-directories \\\"$LOCAL\\\" \\\"$REMOTE\\\")\"
[difftool "ediffclient"]
              cmd = emacsclient --eval \"(ediff-files \\\"$LOCAL\\\" \\\"$REMOTE\\\")\"
# https://stackoverflow.com/questions/1817370/using-ediff-as-git-mergetool
[mergetool.ediff]
        cmd = emacs --eval \"\
        (progn\
          (defun ediff-write-merge-buffer ()\
            (let ((file ediff-merge-store-file))\
              (set-buffer ediff-buffer-C)\
              (write-region (point-min) (point-max) file)\
              (message \\\"Merge buffer saved in: %s\\\" file)\
              (set-buffer-modified-p nil)\
              (sit-for 1)))\
          (setq ediff-quit-hook 'kill-emacs\
                ediff-quit-merge-hook 'ediff-write-merge-buffer)\
          (ediff-merge-files-with-ancestor \\\"$LOCAL\\\" \\\"$REMOTE\\\"\
                                           \\\"$BASE\\\" nil \\\"$MERGED\\\"))\"
#
# === .hgrc merge config ===
# vimdiff_4.executable = vimdiff
# vimdiff_4.args = -f -d $output -M $local $base $other -c "wincmd J" -c "setl modifiable write"
# vimdiff_4.premerge = keep
# vimdiff_3.executable = vimdiff
# vimdiff_3.args = -f -M $local $base $other -c "wincmd J" -c "setl modifiable write"
# vimdiff_3.premerge = keep

[tig]
    refresh-mode=periodic
    refresh-interval=3
    main-view-date-display=relative-compact
    main-view-id-display=true
    # Tig always shows "author dates" instead of "commit dates",
    # making reflog dates are very confusing
    reflog-view-date-display=relative

[include]
    path = ~/.config/git/site.config
