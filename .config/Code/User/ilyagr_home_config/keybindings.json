// Place your key bindings in this file to override the defaults
[
	{
		"key": "ctrl+shift+escape",
		"command": "notifications.clearAll"
	},
	{
		"key": "ctrl+escape",
		"command": "notifications.hideList",
		"when": "notificationCenterVisible"
	},
	{
		"key": "ctrl+k ctrl+alt+s",
		"command": "workbench.action.openGlobalKeybindingsFile"
	},
	// BEGIN Dance
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "editorTextFocus && dance.mode == 'normal' "
	},
	{
		"key": "alt+,",
		"command": "dance.selections.clear.main",
		"when": "editorTextFocus && dance.mode == 'normal'"
	},
	{
		"key": ",",
		"command": "dance.selections.clear.secondary",
		"when": "editorTextFocus && dance.mode == 'normal'"
	},
	{
		"key": "x",
		"command": "dance.selections.expandToLines",
		"when": "editorTextFocus && dance.mode == 'normal'"
	},
	{
		"key": "alt+x",
		"command": "dance.selections.trimLines",
		"when": "editorTextFocus && dance.mode == 'normal'"
	},
	{
		"key": "shift+alt+x",
		"command": "dance.select.line.above.extend"
	},
	// Not sure what the following ones are
	{
		"key": "alt+j alt+j",
		"command": "dance.edit.join",
		"when": "editorTextFocus && dance.mode == 'normal'"
	},
	{
		"key": "ctrl+alt+j",
		"command": "dance.edit.join",
		"when": "editorTextFocus && dance.mode == 'normal'"
	},
	// END Dance
	// BEGIN VSpaceCode
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
	},
	{
		"key": "space",
		"command": "vspacecode.space",
		"when": "sideBarFocus && !inputFocus && !whichkeyActive"
	},
	{
		"key": "tab",
		"command": "extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
	},
	{
		"key": "tab",
		"command": "-extension.vim_tab",
		"when": "editorFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
	},
	{
		"key": "x",
		"command": "magit.discard-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "k",
		"command": "-magit.discard-at-point"
	},
	{
		"key": "-",
		"command": "magit.reverse-at-point",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "v",
		"command": "-magit.reverse-at-point"
	},
	{
		"key": "shift+-",
		"command": "magit.reverting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+v",
		"command": "-magit.reverting"
	},
	{
		"key": "shift+o",
		"command": "magit.resetting",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
	},
	{
		"key": "shift+x",
		"command": "-magit.resetting"
	},
	{
		"key": "x",
		"command": "-magit.reset-mixed"
	},
	{
		"key": "ctrl+u x",
		"command": "-magit.reset-hard"
	},
	{
		"key": "y",
		"command": "-magit.show-refs"
	},
	{
		"key": "y",
		"command": "vspacecode.showMagitRefMenu",
		"when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
	},
	// END VSpaceCode
	// Not sure what these are
	{
		"key": "ctrl+j",
		"command": "workbench.action.quickOpenSelectNext",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+k",
		"command": "workbench.action.quickOpenSelectPrevious",
		"when": "inQuickOpen"
	},
	{
		"key": "ctrl+j",
		"command": "selectNextSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+k",
		"command": "selectPrevSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+l",
		"command": "acceptSelectedSuggestion",
		"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
	},
	{
		"key": "ctrl+j",
		"command": "showNextParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+k",
		"command": "showPrevParameterHint",
		"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
	},
	{
		"key": "ctrl+h",
		"command": "file-browser.stepOut",
		"when": "inFileBrowser"
	},
	{
		"key": "ctrl+l",
		"command": "file-browser.stepIn",
		"when": "inFileBrowser"
	},
	// ctrl+shift+c for copy. It's also possible to make it copy when there's a selection
	// "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    {
        "key": "ctrl+c",
        "command": "workbench.action.terminal.sendSequence",
        "args": {
          "text": "\u0003"
        },
        "when": "terminalFocus"
    },
]