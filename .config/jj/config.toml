"$schema" = "https://jj-vcs.github.io/jj/prerelease/config-schema.json"
# "$schema" = "file:///Users/ilyagr/dev/jj/docs/config-schema.json"
# "$schema" = "https://github.com/jj-vcs/jj/raw/03b3b1e52321f69319c3d9427c8f8aa2e4800dd3/cli/src/config-schema.json"

[git]
# subprocess=false

[core]
# fsmonitor="watchman"
# watchman.register_snapshot_trigger = true

[user]
name = "Ilya Grigoriev"
email = "ilyagr@users.noreply.github.com"

[ui]
diff-editor = "diffedit3"
merge-editor = "vimdiff"

# merge-editor = "meld"
# merge-editor = "kdiff3"
# pager="sp"
# pager="moar"
# pager=":builtin"
# pager=["ov", "-F"]

color = "always"
log-word-wrap = true
default-command = ["status", "--no-pager"]

# Experimenting :(
# always-allow-large-revsets = true

[fix.tools.rustfmt]
patterns = ["glob:'**/*.rs'"]
command = ["rustfmt", "--emit", "stdout"]



[diff.color-words]
# max-inline-alternation = 3  # Now the default

# BEGIN PR https://github.com/martinvonz/jj/pull/3109/files
[merge-tools."meld-3"]
# With Meld's 3-way merge resolution mode, once the output pane has been
# edited, it loses the original contents of `$base`. Here we offer an
# alternative that opens the original two sides compared to the base in two
# more tabs.
merge-args = ["--diff", "$left", "$output", "$right", "--diff", "$base", "$left", "--diff", "$base", "$right",]

    # Nonsense for testing, mostly doesn't work
    # "--diff", "$left", "$output"]

# To make it useful, the output pane must be prepopulated with _something_. The
# conflict markers here are not a great distraction, and might even be helpful
# in their own right.
merge-tool-edits-conflict-markers = true
# END PR

[merge-tools.diffedit3]
merge-args = ["$left", "$right","$output"]
merge-tool-edits-conflict-markers = true

[merge-tools.diffedit3l]
program = "diffedit3"
merge-args = ["$left", "$output","$output"]
merge-tool-edits-conflict-markers = true
[merge-tools.diffedit3r]
program = "diffedit3"
merge-args = ["$output", "$right","$output"]
merge-tool-edits-conflict-markers = true

# [experimental-advance-bookmarks]
# enabled-bookmarks = ["glob:*"]
# disabled-bookmarks = ["main", "gh-pages", "ilya", "ilya2"]

#[merge-tools.vim]
# conflict-marker-style="diff"

[merge-tools.pratdiff]
diff-args = ["--color=always", "$left", "$right"]
diff-invocation-mode = "file-by-file"

[merge-tools.gvimdiff]
program = "gvim"
# `-d` enables diff mode. `-f` makes vim run in foreground even if it starts a GUI.
# The other options make sure that only the output file can be modified.
merge-args = ["-f", "-d", "$output", "-M", "$left", "$base", "$right",
              "-c", "wincmd J", "-c", "set modifiable", "-c", "set write",
              "-c", "/<<<<<</+2"]
merge-tool-edits-conflict-markers = true
# Using vimdiff as a diff editor is not recommended. For instructions on configuring
# the DirDiff Vim plugin for a better experience, see
# https://gist.github.com/ilyagr/5d6339fb7dac5e7ab06fe1561ec62d45
edit-args = ["-f", "-d", "$left", "$right"]

# #3982
diff-args = ["-f", "-d", "$left", "$right"]
diff-invocation-mode = "file-by-file"


# cargo install --git https://github.com/arxanas/git-branchless scm-record --features scm-diff-editor
[merge-tools.scm]
program = "scm-diff-editor"
edit-args = ["--dir-diff", "$left", "$right"]

[merge-tools.tauri]
program = "tauri_difftool"
edit-args = ["$left", "$right", "$output"]

[merge-tools.local]
program = "echo"
edit-args = ["Use `diffedit3` instead of `diffedit3-web` or `local`!!"]

# [merge-tools.diffedit3]
# program = "diffedit3-web"
# edit-args = ["$left", "$right", "$output", "--port-range", "10035", "10040"]
# # merge-args = ["$left", "$right", "$output", "--port-range", "10035", "10040"]
# # merge-args = false
# merge-tool-edits-conflict-markers = true

[merge-tools.diffedit3-web]
program = "echo"
edit-args = ["Use `diffedit3` instead of `diffedit3-web`!!"]

[merge-tools.diffedit3-gui]
edit-args = ["$left", "$right", "$output"]

[merge-tools.vscode]
program = "code"
merge-args = [
    "--wait",
    "--merge",
    "$left",
    "$right",
    "$base",
    "$output",
] #"--new-window",
merge-tool-edits-conflict-markers = true
# use-tmp-dir-under-workspace=true

[merge-tools.idea]
program = "idea"
diff-args = ["diff", "$left", "$right"]
edit-args = ["diff", "$left", "$right"]
merge-args = ["merge", "$left", "$right", "$base", "$output"]

[merge-tools.code-xargs]
program = "sh"
diff-invocation-style = "repeat-file-pairs"
edit-args = [
    "-c",
    '''printf "%s\0" "$@" | xargs -0 -n2 -P0 -t -- code-wayland --wait --diff''',
    "unused_name",
    "$repeat",
    "$left",
    "$right",
]
use-tmp-dir-under-workspace = true

[merge-tools.vimtabdiff]
# Replaces my old vimtabdiff script
# Alternatively this can be [merge-tools.'vimtabdiff.py']
program = "vimtabdiff.py"
edit-args = ["--vim", '''vim -c "colorscheme murphy"''', "$left", "$right"]

[merge-tools.vimtabdiff-nvim]
program = "vimtabdiff.py"
edit-args = ["--vim", '''nvim -c "colorscheme murphy"''', "$left", "$right"]

[merge-tools.vimtabdiff-gvim]
program = "vimtabdiff.py"
edit-args = [
    "--vim",
    '''gvim --nofork -c "colorscheme murphy"''',
    "$left",
    "$right",
]

[merge-tools.diff]
edit-args = ["-r", "--brief", "--new-file", "-s", "$left", "$right"]
diff-args = ["-r", "--new-file", "-s", "$left", "$right"]
[merge-tools.diff3]
program = "sh"
merge-args = [
    "-c",
    "git merge-file --zdiff3 --stdout \"$left\" \"$base\" \"$right\" | diff -u \"$left\" -",
]

[merge-tools.git]
edit-args = ["diff", "--no-index", "--name-only", "$left", "$right"]

[merge-tools.kdiff3]
edit-args = [
    "--merge",
    "--cs",
    "CreateBakFiles=0",
    "--cs",
    "SkipDirStatus=1",
    "$left",
    "$right",
    "$output",
]
# Notes on interesting kdiff3 ptions
# SkipDirStatus=1
# CreateBakFiles=0
# ShowInfoDialogs=0
# AutoCopySelection (??)
# SyncMode (??)

# https://github.com/jj-vcs/jj/wiki/Vim#dirdiff-plugin
[merge-tools.vimdirdiff]
# No config needed, only for tab completion
[merge-tools.gvimdirdiff]
# No config needed, only for tab completion

[merge-tools.kdiff3f] # Flipped
merge-args = ["$base", "$right", "$left", "-o", "$output", "--auto"]
program = "kdiff3"

[merge-tools.p4merge]
merge-args = ["$base", "$left", "$right", "$output"]
[merge-tools.p4mergef]
merge-args = ["$base", "$right", "$left", "$output"]
program = "p4merge"
env = { QT_QPA_PLATFORM = "xcb" }                    # Doesn't seem to work?

[merge-tools.pause]
program = ",pause_after"
edit-args = ["printf", "left:\t%s\nright:\t%s\nFiles will be kept until you press ENTER.\n",  "$left", "$right"]
merge-args = [
    "printf",
    """
left:\t%s
right:\t%s
base:\t%s
output:\t%s
marker_length:\t%s
Files will be kept until you press ENTER.
""",
    "$left",
    "$right",
    "$base",
    "$output",
    "$marker_length",
]

[merge-tools.bcompare]
edit-args = ["-ro1", "-expandall", "$left", "$right"]
merge-args = [
    "$left",
    "$right",
    "$base",
    "$output",
    "-automerge",
    "-reviewconflicts",
] #"-solo"? Is `-ro` a good idea?

[merge-tools.bcomp]
edit-args = ["-ro1", "-expandall", "$left", "$right"]
# edit-args = ["$left", "$right", "-favorright", "-edit", "-mergeoutput=$output",]
merge-args = [
    "$left",
    "$right",
    "$base",
    "$output",
    "-automerge",
    "-reviewconflicts",
] #"-solo"? is `-ro` a good idea?

[merge-tools.bcomp-3]
program = "bcomp"
edit-args = [
    "$left",
    "$right",
    "-expandall",
    "-mergeoutput=$output",
    "-ro1",
    "-ro2",
] #"-favorright", "-edit",

[merge-tools.bcomp-3b]
program = "bcomp"
edit-args = [
    "$left",
    "$left",
    "$right",
    "-expandall",
    "-mergeoutput=$right",
    "-ro1",
    "-ro2",
    "-ro3",
] #"-favorright", "-edit",

[merge-tools.meld]
edit-args = ["$left", "$right", "-a"] #  "-o", "/tmp/output"]
# vimdiff.merge-args = ["-f", "-d", "$output", "-M",
#                       "$left", "$base", "$right",
#                       "-c", "wincmd J", "-c", "set modifiable",
#                       "-c", "set write"]
#
[merge-tools.difft]
diff-args = ["--color=always", "$left", "$right"]
[merge-tools.diffti]
program = "difft"
diff-args = ["--color=always", "--display=inline", "$left", "$right"]

[merge-tools.opendiff]  # Apple's FileMerge
program="pause_after"
edit-args = ["opendiff", "$left", "$right"]
merge-args = ["opendiff", "$left", "$right", "-ancestor", "$base", "-merge", "$output"]

[merge-tools.filemerge] # Same, but launched differently.
program = "open"
edit-args = ["-a", "FileMerge", "-n", "-W", "--args", "-left", "$left", "-right", "$right", "-merge", "$output"]
merge-args = ["-a", "FileMerge", "-n", "-W", "--args", "-left", "$left", "-right", "$right", "-ancestor", "$base", "-merge", "$output",]

[aliases]
n = ["new"]
d = ["diff", "-s"]
de = ["diffedit"]
di = ["describe"]
delta = ["diff", "--git", "--config-toml=ui.pager='delta'"]
deltas = ["diff", "--git", "--config-toml=ui.pager='delta -s'"]
deltan = ["diff", "--git", "--config-toml=ui.pager='delta -n'"]
difft = ["diff", "--tool=difft"]

init = ["git", "init"]
clone = ["git", "clone"]
upclone = ["git", "clone", "--colocate", "--remote=upstream"]
remote = ["git", "remote"]
p = ["git", "push"]
pt = ["git", "push", "--tracked", "--deleted"]
pu = ["p", "--remote=upstream"]
ptu = ["pt", "--remote=upstream"]
put = ["ptu"]

push = ["p"]
pusht = ["pt"]
pushu = ["pu"]
pushtu = ["ptu"]

# https://github.com/jj-vcs/jj/pull/6190
ydiff = ["diff", "--config=diff.color-words.conflict=pair"]

# https://github.com/jj-vcs/jj/issues/2338#issuecomment-2477654445
# TODO: Update with https://github.com/jj-vcs/jj/discussions/5568#discussioncomment-12045803
tug = ["bookmark", "move", "--from", "heads(::@- & bookmarks())", "--to", "@-"]

# Thanks to Hypatian from https://discord.com/channels/968932220549103686/968932220549103689/1225647474933370950
forcibly = ["--config-toml=revset-aliases.'immutable_heads()' = 'none()'"]

eachcommit = [
    "log",
    "--no-graph",
    "--color=never",
    "--ignore-working-copy",
    "-T",
    'commit_id.shortest(8) ++ "\n"',
    "-r",
]


[revset-aliases]
next = "@-+ ~ @"                      # After `jj up abc`, `jj up next` is equivalent to `jj up abc+`
M = "present(main) | present(master)" # Main branch
# R: "relevant commits" from jj.logstatus. Better name?
R = "M..@|(M..@)-|@..M|@|M..bookmarks()|(M..bookmarks())-|M|remote_bookmarks().. | (remote_bookmarks()..)-"
# 'iddot(from, to)'= '(from..to)|((::from & ::to)~((::from & ::to)-))'
solid = "~empty() | merges()"

ghqueue = 'remote_bookmarks(glob:"gh-readonly-queue/*")'
oldmains = 'present(main@origin)|present(master@origin)'
oldigtrunk = 'heads(oldmains::oldmains)'
mains = 'present(main@origin)|present(master@origin)|present(main@upstream)|present(master@upstream)|ghqueue'
igtrunk = 'heads(mains::mains)'

#  jj log -r 'siddot(main,mdbook::|mkdocs::)'
'siddot(from, to)' = '(from..to)|(from..to)-'
'iddot(from, to)' = 'siddot(from,to)|from'
stack = "(trunk()..@)::"
open = "immutable-heads.."
stacklog = "ancestors(stack, 2)|trunk()"
openlog = "ancestors(open, 2)|immutable-heads|@"
stackl = "stacklog"
openl = "openlog"
# immutable-heads = "trunk()"
immutable-heads-jj-repo = "present(main@upstream)|present(main@origin)|present(gh-pages@upstream)"
immutable-heads-no-dependabot =  'present(trunk()) | tags() | untracked_remote_bookmarks(glob:"!dependabot/*")'
"immutable_heads()" = "immutable-heads-no-dependabot"

# Should this be `roots( conflict() & ::x )`
"conflictroots(x)" = "roots( (::x~conflict())..x )"
"cr(x)" = "conflictroots(x)"
crat = "cr(@)"
crall = "cr(heads(::))"  # Not fully tested
at = "@"

[revsets]
short-prefixes = "ancestors((remote_bookmarks(main)|remote_bookmarks(master)|remote_bookmarks(develop)|tags())..,2)"
log-graph-prioritize = "@|present(main)" # present(ilya)| ??
# immutable-heads = "immutable-heads"
# log="openl"
# log = "openlog"

[templates]
# Add empty set to default. Alternatives: ∅◌
log_node = '''
coalesce(
  if(!self, label("elided", "~")),
  label(
    separate(" ",
      if(current_working_copy, "working_copy"),
      if(immutable, "immutable"),
      if(conflict, "conflict"),
    ),
    coalesce(
      if(current_working_copy, "@"),
      if(immutable, "◆"),
      if(conflict, "×"),
      if(empty, "◌"),
      "○",
    )
  )
)
'''

  
 # log_node = 'builtin_log_node'
# op_log_node = 'builtin_op_log_node'

[template-aliases]
"format_short_id(id)" = "id.shortest(6)"
# GitHub needs 7 chars to recognize a commit id
"format_short_commit_id(id)" = "id.shortest(7)"
# # `format_short_change_id` is disabled since lowercase ids
# # seem more readable after all.
# 'format_short_change_id(id)' = 'format_short_id(id)'
"format_timestamp(timestamp)" = "timestamp.ago()"
      # signature.email().remove_prefix(
      #   signature.username()
      # ).remove_prefix("@")
"fancy_email(signature)" = """
truncate_end(12,
  concat(
    label("email", signature.email().local()),
    "@",
    label("email", signature.email().domain())
  )
)
"""
# "format_short_signature(signature)" = 'label("email", signature.username() ++ "@")'
"format_short_signature(signature)" = 'fancy_email(signature)'
commit_summary_separator = 'label("separator", "| ")'
# description_placeholder = 'label(separate(" ", if(empty, "empty"), "description placeholder"), "(no description set)")'
"shell_prompt_id(diff_stats)" = '''
label("shell_prompt " ++ if(current_working_copy, "working_copy"),
concat(
  label("separator", "<"),
  separate(label("separator", "|"),
    concat(
      label(if(divergent, "divergent"),
        change_id.shortest()
      ),
      if(divergent,
         label("divergent", "⌥") ++ commit_id.shortest(),
      ),
    ),
    concat(
        if(conflict, label("conflict", "⇋")),
        if(empty, label("empty", "∅")),
        diff_stats
    ),
    bookmarks,
    tags,
  ),
  label("separator", ">"),
),
)
'''

[colors]
"shell_prompt bookmarks" = "blue" # "default"
"shell_prompt working_copy bookmarks" = "bright blue" # "default"
# "description placeholder" =  "yellow" # "blue"
# "empty description placeholder" = "green"

# #3994
 "diff removed token" = { bg = "#330000", underline = false }
 "diff added token" = { bg = "#002200", underline = false }

# [[--scope]]
# --when.commands = ["file show"]
# [--scope.ui]
# pager = ["bat", "-p"]
